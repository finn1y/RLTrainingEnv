#!/usr/bin/env python

import numpy as np
import tensorflow as tf

class PolicyGradient():
    """
        Class to contain the PolicyNetwork and all parameters
    """
    def __init__(self, sizes, gamma=0.99, lr=0.0001, lr_decay=0.9, lr_decay_steps=10000, saved_path=None):
        """
            function to initialise the class

            sizes is an array of [observations, hidden_size, actions] where observations is an array of 
            [observations_low, observations_high], hidden_size is the number of neurons in the hidden layer 
            and actions is an array of [actions_low, actions_high] in turn low is an array of low bounds for 
            each observation/action and high is an array of high bounds for each observation/action respectively

            gamma is the discount factor of future rewards

            lr is the learning rate of the neural network

            lr_decay is a float which is the rate at which the learning rate will decay exponentially

            lr_decay_steps is an int which is the number of time steps to decay the learning rate

            saved_path is a string of the path to the saved Actor-Critic network if one is being loaded
        """
        self.gamma = gamma
        self.lr = lr
        self.lr_decay = lr_decay
        self.n_actions = np.shape(sizes[2])[1]
        self.replay_mem = []
        self.eps = np.finfo(np.float32).eps.item()

        self.policy_net = PolicyNet(sizes)
        self.lr_decay_fn = tf.keras.optimizers.schedules.ExponentialDecay(self.lr, decay_steps=lr_decay_steps, decay_rate=self.lr_decay)
        self.opt = tf.keras.optimizers.Adam(learning_rate=self.lr_decay_fn) #Adam optimiser is...

        #load a saved model (neural net) if provided
        if saved_path:
            self.policy_net = tf.keras.models.load_model(saved_path, custom_object={"CustomModel": PolicyNet})

    def get_parameters(self):
        """
            function to get the parameters of the algorithm

            returns a dict with all the algorithm parameters
        """
        return {"gamma": self.gamma, "lr": self.lr, "lr_decay": self.lr_decay}

    def save_model(self, path):
        """
            function to save the tensorflow model (neural net) to a file

            path is a string of the path to the file where the model will be saved
        """
        self.policy_net.save(path)

    def get_action(self, obv):
        """
            function to get the action based on the current observation using the 
            policy generated by the neural net

            obv is the current observation of the state

            returns the action to take
        """
        action_probs = self.policy_net(np.array([obv]))
        action = np.random.choice(self.n_actions, p=action_probs.numpy()[0])
        
        return action

    def store_step(self, obv, action, reward, next_obv):
        """
            function to store an step's tuple of values

            obv is the observation of the current state

            action is an int of the action taken

            reward is the reward returned when the action is applied to the current state

            next obv is the observation of the next state after action has been applied to the current state
            (placeholder for compatibility across algorithm classes)
        """
        #next_obv is not used in model training 
        self.replay_mem.append({"obv": obv, "action": action, "reward": reward})

    def train(self):
        """
            function to train Policy network using previous episode data from replay memory

            returns the loss of the training as a tensor
        """
        obv_batch = np.array([self.replay_mem[i]["obv"] for i in range(np.shape(self.replay_mem)[0])], dtype=np.float32)
        action_batch = np.array([self.replay_mem[i]["action"] for i in range(np.shape(self.replay_mem)[0])], dtype=int)
        returns = []
        discounted_sum = 0

        #calculate the discounted sum of rewards
        for step in self.replay_mem[::-1]:
            discounted_sum = step["reward"] + self.gamma * discounted_sum
            #iterated inversly therefore insert at beginning of array
            returns.insert(0, discounted_sum)

        #normalise returns
        returns = (returns - np.mean(returns)) / (np.std(returns) + self.eps)

        with tf.GradientTape() as tape:
            action_probs = self.policy_net(obv_batch)

            loss = 0
            for i in range(np.shape(action_probs)[0]):
                #log probability of the action taken
                action_log_prob = tf.math.log(action_probs[i, action_batch[i]])
                #sum loss across episode
                loss += -action_log_prob * returns[i]

        grads = tape.gradient(loss, self.policy_net.trainable_variables)
        self.opt.apply_gradients(zip(grads, self.policy_net.trainable_variables))

        #replay memory only stores a single episode 
        self.replay_mem.clear()

        return loss

class PolicyNet(tf.keras.Model):
    """
        Class to contain the neural network approximating the policy
    """
    def __init__(self, sizes):
        """
            function to initialise the class

            sizes is an array of [observations, hidden_size, actions] where observations is an array of 
            [observations_low, observations_high], hidden_size is the number of neurons in the hidden layer 
            and actions is an array of [actions_low, actions_high] in turn low is an array of low bounds for 
            each observation/action and high is an array of high bounds for each observation/action respectively

            continuous is a bool to determine if the action space is continuous
        """
        super(PolicyNet, self).__init__()
        self.hidden1 = tf.keras.layers.Dense(np.shape(sizes[0])[1], activation="relu")
        self.hidden2 = tf.keras.layers.Dense(sizes[1], activation="relu")
        self.policy = tf.keras.layers.Dense(np.shape(sizes[2])[1], activation="softmax")
    
    def call(self, obv):
        """
            function to define the forward pass of the neural network this function is called 
            when QNet(inputs) is called or QNet.predict(inputs) is called

            obv is the numpy array or tensor of the inputs values to the neural network

            returns a tensor of the probability distribution of the policy output by the neural network
        """
        obv = self.hidden1(obv)
        obv = self.hidden2(obv)
        policy = self.policy(obv)

        return policy


