From 552893a87272a4ca41d7c05862e4914910e68e2c Mon Sep 17 00:00:00 2001
From: Finn <finnmiddletonbaird@gmail.com>
Date: Tue, 12 Apr 2022 17:49:45 +0100
Subject: [PATCH] Added multi-agent functionality

---
 gym_maze/__init__.py          |  12 ----
 gym_maze/envs/maze_env.py     | 108 ++++++++++++++++++++++------------
 gym_maze/envs/maze_view_2d.py |  88 +++++++++++++++++++--------
 3 files changed, 133 insertions(+), 75 deletions(-)

diff --git a/gym_maze/__init__.py b/gym_maze/__init__.py
index e629e7b..c71dc04 100644
--- a/gym_maze/__init__.py
+++ b/gym_maze/__init__.py
@@ -4,45 +4,38 @@ from gym.envs.registration import register
 register(
     id='maze-v0',
     entry_point='gym_maze.envs:MazeEnvSample5x5',
-    max_episode_steps=2000,
 )
 
 register(
     id='maze-sample-5x5-v0',
     entry_point='gym_maze.envs:MazeEnvSample5x5',
-    max_episode_steps=2000,
 )
 
 register(
     id='maze-random-5x5-v0',
     entry_point='gym_maze.envs:MazeEnvRandom5x5',
-    max_episode_steps=2000,
     nondeterministic=True,
 )
 
 register(
     id='maze-sample-10x10-v0',
     entry_point='gym_maze.envs:MazeEnvSample10x10',
-    max_episode_steps=10000,
 )
 
 register(
     id='maze-random-10x10-v0',
     entry_point='gym_maze.envs:MazeEnvRandom10x10',
-    max_episode_steps=10000,
     nondeterministic=True,
 )
 
 register(
     id='maze-sample-3x3-v0',
     entry_point='gym_maze.envs:MazeEnvSample3x3',
-    max_episode_steps=1000,
 )
 
 register(
     id='maze-random-3x3-v0',
     entry_point='gym_maze.envs:MazeEnvRandom3x3',
-    max_episode_steps=1000,
     nondeterministic=True,
 )
 
@@ -50,33 +43,28 @@ register(
 register(
     id='maze-sample-100x100-v0',
     entry_point='gym_maze.envs:MazeEnvSample100x100',
-    max_episode_steps=1000000,
 )
 
 register(
     id='maze-random-100x100-v0',
     entry_point='gym_maze.envs:MazeEnvRandom100x100',
-    max_episode_steps=1000000,
     nondeterministic=True,
 )
 
 register(
     id='maze-random-10x10-plus-v0',
     entry_point='gym_maze.envs:MazeEnvRandom10x10Plus',
-    max_episode_steps=1000000,
     nondeterministic=True,
 )
 
 register(
     id='maze-random-20x20-plus-v0',
     entry_point='gym_maze.envs:MazeEnvRandom20x20Plus',
-    max_episode_steps=1000000,
     nondeterministic=True,
 )
 
 register(
     id='maze-random-30x30-plus-v0',
     entry_point='gym_maze.envs:MazeEnvRandom30x30Plus',
-    max_episode_steps=1000000,
     nondeterministic=True,
 )
diff --git a/gym_maze/envs/maze_env.py b/gym_maze/envs/maze_env.py
index 9076f2a..4ec7b4b 100644
--- a/gym_maze/envs/maze_env.py
+++ b/gym_maze/envs/maze_env.py
@@ -13,7 +13,7 @@ class MazeEnv(gym.Env):
 
     ACTION = ["N", "S", "E", "W"]
 
-    def __init__(self, maze_file=None, maze_size=None, mode=None, enable_render=True):
+    def __init__(self, maze_file=None, maze_size=None, mode=None, enable_render=True, n_robots=1):
 
         self.viewer = None
         self.enable_render = enable_render
@@ -22,7 +22,8 @@ class MazeEnv(gym.Env):
             self.maze_view = MazeView2D(maze_name="OpenAI Gym - Maze (%s)" % maze_file,
                                         maze_file_path=maze_file,
                                         screen_size=(640, 640), 
-                                        enable_render=enable_render)
+                                        enable_render=enable_render,
+                                        n_robots=n_robots)
         elif maze_size:
             if mode == "plus":
                 has_loops = True
@@ -34,7 +35,8 @@ class MazeEnv(gym.Env):
             self.maze_view = MazeView2D(maze_name="OpenAI Gym - Maze (%d x %d)" % maze_size,
                                         maze_size=maze_size, screen_size=(640, 640),
                                         has_loops=has_loops, num_portals=num_portals,
-                                        enable_render=enable_render)
+                                        enable_render=enable_render,
+                                        n_robots=n_robots)
         else:
             raise AttributeError("One must supply either a maze_file path (str) or the maze_size (tuple of length 2)")
 
@@ -70,20 +72,47 @@ class MazeEnv(gym.Env):
         self.np_random, seed = seeding.np_random(seed)
         return [seed]
 
-    def step(self, action):
-        if isinstance(action, int):
-            self.maze_view.move_robot(self.ACTION[action])
+    def step(self, actions):
+        prev_state = self.state
+        done = False
+
+        if self.maze_view.n_robots > 1:
+            #multi agent
+            dirs = []
+
+            for action in actions:
+                if action in self.ACTION:
+                    dirs.append(action)
+                else:
+                    dirs.append(self.ACTION[int(action)])
+
+            self.maze_view.move_robot(dirs)
+            reward = np.zeros(self.maze_view.n_robots)
+
+            for i in range(self.maze_view.n_robots):
+                if np.array_equal(self.maze_view.robots[i], self.maze_view.goal):
+                    reward[i] = 1
+                    done = True
+                elif np.array_equal(self.maze_view.robots, prev_state):
+                    reward[i] = -1/(self.maze_size[0]*self.maze_size[1])
+                else:
+                    reward[i] = -0.1/(self.maze_size[0]*self.maze_size[1])
         else:
-            self.maze_view.move_robot(action)
+            #single agent
+            if actions in self.ACTION:
+                self.maze_view.move_robot(actions)
+            else:
+                self.maze_view.move_robot(self.ACTION[int(actions)])
 
-        if np.array_equal(self.maze_view.robot, self.maze_view.goal):
-            reward = 1
-            done = True
-        else:
-            reward = -0.1/(self.maze_size[0]*self.maze_size[1])
-            done = False
+            if np.array_equal(self.maze_view.robots, self.maze_view.goal):
+                reward = 1
+                done = True
+            elif np.array_equal(self.maze_view.robots, prev_state):
+                reward = -1/(self.maze_size[0]*self.maze_size[1])
+            else:
+                reward = -0.1/(self.maze_size[0]*self.maze_size[1])
 
-        self.state = self.maze_view.robot
+        self.state = self.maze_view.robots
 
         info = {}
 
@@ -91,7 +120,12 @@ class MazeEnv(gym.Env):
 
     def reset(self):
         self.maze_view.reset_robot()
-        self.state = np.zeros(2)
+        
+        if self.maze_view.n_robots > 1:
+            self.state = np.array([np.zeros(2) for i in range(self.maze_view.n_robots)])
+        else:
+            self.state = np.zeros(2)
+
         self.steps_beyond_done = None
         self.done = False
         return self.state
@@ -108,64 +142,64 @@ class MazeEnv(gym.Env):
 
 class MazeEnvSample5x5(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvSample5x5, self).__init__(maze_file="maze2d_5x5.npy", enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvSample5x5, self).__init__(maze_file="maze2d_5x5.npy", enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvRandom5x5(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvRandom5x5, self).__init__(maze_size=(5, 5), enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvRandom5x5, self).__init__(maze_size=(5, 5), enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvSample10x10(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvSample10x10, self).__init__(maze_file="maze2d_10x10.npy", enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvSample10x10, self).__init__(maze_file="maze2d_10x10.npy", enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvRandom10x10(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvRandom10x10, self).__init__(maze_size=(10, 10), enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvRandom10x10, self).__init__(maze_size=(10, 10), enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvSample3x3(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvSample3x3, self).__init__(maze_file="maze2d_3x3.npy", enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvSample3x3, self).__init__(maze_file="maze2d_3x3.npy", enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvRandom3x3(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvRandom3x3, self).__init__(maze_size=(3, 3), enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvRandom3x3, self).__init__(maze_size=(3, 3), enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvSample100x100(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvSample100x100, self).__init__(maze_file="maze2d_100x100.npy", enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvSample100x100, self).__init__(maze_file="maze2d_100x100.npy", enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvRandom100x100(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvRandom100x100, self).__init__(maze_size=(100, 100), enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvRandom100x100, self).__init__(maze_size=(100, 100), enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvRandom10x10Plus(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvRandom10x10Plus, self).__init__(maze_size=(10, 10), mode="plus", enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvRandom10x10Plus, self).__init__(maze_size=(10, 10), mode="plus", enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvRandom20x20Plus(MazeEnv):
 
-    def __init__(self, enable_render=True):
-        super(MazeEnvRandom20x20Plus, self).__init__(maze_size=(20, 20), mode="plus", enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvRandom20x20Plus, self).__init__(maze_size=(20, 20), mode="plus", enable_render=enable_render, n_robots=n_robots)
 
 
 class MazeEnvRandom30x30Plus(MazeEnv):
-    def __init__(self, enable_render=True):
-        super(MazeEnvRandom30x30Plus, self).__init__(maze_size=(30, 30), mode="plus", enable_render=enable_render)
+    def __init__(self, enable_render=True, n_robots=1):
+        super(MazeEnvRandom30x30Plus, self).__init__(maze_size=(30, 30), mode="plus", enable_render=enable_render, n_robots=n_robots)
diff --git a/gym_maze/envs/maze_view_2d.py b/gym_maze/envs/maze_view_2d.py
index 0be08f1..8f0ea2a 100644
--- a/gym_maze/envs/maze_view_2d.py
+++ b/gym_maze/envs/maze_view_2d.py
@@ -7,7 +7,7 @@ import os
 class MazeView2D:
 
     def __init__(self, maze_name="Maze2D", maze_file_path=None,
-                 maze_size=(30, 30), screen_size=(600, 600),
+                 maze_size=(30, 30), screen_size=(600, 600), n_robots=1,
                  has_loops=False, num_portals=0, enable_render=True):
 
         # PyGame configurations
@@ -43,7 +43,12 @@ class MazeView2D:
         self.__goal = np.array(self.maze_size) - np.array((1, 1))
 
         # Create the Robot
-        self.__robot = self.entrance
+        self.n_robots = n_robots
+
+        if self.n_robots > 1:
+            self.__robots = [self.entrance for i in range(n_robots)]
+        else:
+            self.__robots = self.entrance
 
         if self.__enable_render is True:
             # Create a background
@@ -61,7 +66,7 @@ class MazeView2D:
             self.__draw_portals()
 
             # show the robot
-            self.__draw_robot()
+            self.__draw_robots()
 
             # show the entrance
             self.__draw_entrance()
@@ -89,28 +94,51 @@ class MazeView2D:
         except Exception:
             pass
 
-    def move_robot(self, dir):
-        if dir not in self.__maze.COMPASS.keys():
-            raise ValueError("dir cannot be %s. The only valid dirs are %s."
-                             % (str(dir), str(self.__maze.COMPASS.keys())))
+    def move_robot(self, dirs):
+        if self.n_robots > 1:
+            for i in range(np.size(dirs)):    
+                if dirs[i] not in self.__maze.COMPASS.keys():
+                    raise ValueError("dir cannot be %s. The only valid dirs are %s."
+                                     % (str(dirs[i]), str(self.__maze.COMPASS.keys())))
+
+                if self.__maze.is_open(self.__robots[i], dirs[i]):
+
+                    # update the drawing
+                    self.__draw_robots(transparency=0)
+
+                    # move the robot
+                    self.__robots[i] += np.array(self.__maze.COMPASS[dirs[i]])
+                    # if it's in a portal afterward
+                    if self.maze.is_portal(self.robots[i]):
+                        self.__robots[i] = np.array(self.maze.get_portal(tuple(self.robots[i])).teleport(tuple(self.robots[i])))
+        
+        else:
+            if dirs not in self.__maze.COMPASS.keys():
+                raise ValueError("dir cannot be %s. The only valid dirs are %s."
+                                 % (str(dirs), str(self.__maze.COMPASS.keys())))
 
-        if self.__maze.is_open(self.__robot, dir):
+            if self.__maze.is_open(self.__robots, dirs):
+                # update the drawing
+                self.__draw_robots(transparency=0)
 
-            # update the drawing
-            self.__draw_robot(transparency=0)
+                # move the robot
+                self.__robots += np.array(self.__maze.COMPASS[dirs])
+                # if it's in a portal afterward
+                if self.maze.is_portal(self.robots):
+                    self.__robots = np.array(self.maze.get_portal(tuple(self.robot)).teleport(tuple(self.robot)))
 
-            # move the robot
-            self.__robot += np.array(self.__maze.COMPASS[dir])
-            # if it's in a portal afterward
-            if self.maze.is_portal(self.robot):
-                self.__robot = np.array(self.maze.get_portal(tuple(self.robot)).teleport(tuple(self.robot)))
-            self.__draw_robot(transparency=255)
+        self.__draw_robots(transparency=255)
 
     def reset_robot(self):
 
-        self.__draw_robot(transparency=0)
-        self.__robot = np.zeros(2, dtype=int)
-        self.__draw_robot(transparency=255)
+        self.__draw_robots(transparency=0)
+
+        if self.n_robots > 1:
+            self.__robots = [np.zeros(2, dtype=int) for i in range(self.n_robots)]
+        else:
+            self.__robots = np.zeros(2, dtype=int)
+
+        self.__draw_robots(transparency=255)
 
     def __controller_update(self):
         if not self.__game_over:
@@ -125,7 +153,7 @@ class MazeView2D:
             self.__draw_entrance()
             self.__draw_goal()
             self.__draw_portals()
-            self.__draw_robot()
+            self.__draw_robots()
 
 
             # update the screen
@@ -194,16 +222,24 @@ class MazeView2D:
 
             pygame.draw.line(self.maze_layer, colour, line_head, line_tail)
 
-    def __draw_robot(self, colour=(0, 0, 150), transparency=255):
+    def __draw_robots(self, colour=(0, 0, 150), transparency=255):
 
         if self.__enable_render is False:
             return
         
-        x = int(self.__robot[0] * self.CELL_W + self.CELL_W * 0.5 + 0.5)
-        y = int(self.__robot[1] * self.CELL_H + self.CELL_H * 0.5 + 0.5)
         r = int(min(self.CELL_W, self.CELL_H)/5 + 0.5)
 
-        pygame.draw.circle(self.maze_layer, colour + (transparency,), (x, y), r)
+        if self.n_robots > 1:
+            x_coords = [int(robot[0] * self.CELL_W + self.CELL_W * 0.5 + 0.5) for robot in self.__robots]
+            y_coords = [int(robot[1] * self.CELL_H + self.CELL_H * 0.5 + 0.5) for robot in self.__robots]
+
+            for x, y in zip(x_coords, y_coords):
+                pygame.draw.circle(self.maze_layer, colour + (transparency,), (x, y), r)
+        else:
+            x = int(self.__robots[0] * self.CELL_W + self.CELL_W * 0.5 + 0.5)
+            y = int(self.__robots[1] * self.CELL_H + self.CELL_H * 0.5 + 0.5)
+
+            pygame.draw.circle(self.maze_layer, colour + (transparency,), (x, y), r)
 
     def __draw_entrance(self, colour=(0, 0, 150), transparency=235):
 
@@ -245,8 +281,8 @@ class MazeView2D:
         return self.__maze
 
     @property
-    def robot(self):
-        return self.__robot
+    def robots(self):
+        return self.__robots
 
     @property
     def entrance(self):
-- 
2.25.1

